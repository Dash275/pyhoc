#!/usr/bin/env python

import pwd
import sys
import platform
import os
import re

def config_folder(folder):
    if not os.path.exists(folder):
        os.mkdir(folder)

def config_file(file_path):
    if not os.path.exists(file_path):
        with open(file_path, 'w') as f: f.write("")

def user_prompt():
    return pwd.getpwuid(os.getuid())[0]

def comp_prompt():
    return platform.node()

def login_prompt(user, comp):
    return "@".join((user, comp))

def dir_prompt(uname):
    cwd = os.getcwd()
    homedir = "".join(("/home/", uname))
    if re.match(homedir, cwd):
        cwd = re.sub(homedir, "~", cwd)
    return cwd

def check_status(log_file, new_state):
    new_state_exp = "".join((new_state, "$"))
    with open(log_file, 'r') as f:
        old_state = f.read()
    if re.match(new_state_exp, old_state): return False
    else:
        with open(log_file, 'w') as f: f.write(new_state)
        return True

def main(out):
    uprompt = user_prompt()
    cprompt = comp_prompt()
    lprompt = login_prompt(uprompt, cprompt)
    dprompt = dir_prompt(uprompt)

    config_dir = "".join(("/home/", uprompt, "/.pyhoc/"))
    config_folder(config_dir)

    udir = "".join((config_dir, ".u"))
    cdir = "".join((config_dir, ".c"))
    ldir = "".join((config_dir, ".l"))
    ddir = "".join((config_dir, ".d"))

    for xdir in set([udir, cdir, ldir, ddir]): config_file(xdir)

    ustate = check_status(udir, uprompt)
    cstate = check_status(cdir, cprompt)
    lstate = check_status(ldir, lprompt)
    dstate = check_status(ddir, dprompt)

    subs = []

    # 0: Regex, 1: state newness (true = new) 2: output given regex
    subs.append(("%u", ustate, "".join((uprompt, " "))))
    subs.append(("%U", ustate, uprompt))
    subs.append(("%bu", ustate, "".join(("[", uprompt, "] "))))
    subs.append(("%bU", ustate, "".join(("[", uprompt, "]"))))

    subs.append(("%c", cstate, "".join((cprompt, " "))))
    subs.append(("%C", cstate, cprompt))
    subs.append(("%bc", cstate, "".join(("[", cprompt, "] "))))
    subs.append(("%bC", cstate, "".join(("[", cprompt, "]"))))

    subs.append(("%l", lstate, "".join((lprompt, " "))))
    subs.append(("%L", lstate, lprompt))
    subs.append(("%bl", lstate, "".join(("[", lprompt, "] "))))
    subs.append(("%bL", lstate, "".join(("[", lprompt, "]"))))

    subs.append(("%d", dstate, "".join((dprompt, " "))))
    subs.append(("%D", dstate, dprompt))
    subs.append(("%bd", dstate, "".join(("[", dprompt, "] "))))
    subs.append(("%bD", dstate, "".join(("[", dprompt, "]"))))

    for literal in subs:
        if literal[1]: out = re.sub(literal[0], literal[2], out)
        else: out = re.sub(literal[0], "", out)

    return out

if __name__ == '__main__':
    output = main("".join(sys.argv[1:]))
    sys.stdout.write(output)

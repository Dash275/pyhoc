#!/usr/bin/env python

import pwd
import platform
import os
import sys
import re

def config_folder(folder):
    if not os.path.exists(folder):
        os.mkdir(folder)

def config_file(file_path):
    if not os.path.exists(file_path):
        f = open(file_path, 'w')
        f.write("")
        f.close()

def user_prompt():
    return pwd.getpwuid(os.getuid())[0]

def comp_prompt():
    return platform.node()

def login_prompt(user, comp):
    return "@".join([user, comp])

def dir_prompt(uname):
    cwd = os.getcwd()
    homedir = "".join(["/home/", uname])
    if re.match(homedir, cwd):
        cwd = re.sub(homedir, "~", cwd)
    return cwd

def check_status(log_file, new_state):
    config_file(log_file)
    f = open(log_file, 'r')
    new_state_exp = "".join([new_state, "$"])
    old_state = f.read()
    if re.match(new_state_exp, old_state):
        f.close()
        return False
    else:
        f.close()
        f = open(log_file, 'w')
        f.write(new_state)
        f.close()
        return True

def main(out):
    uprompt = user_prompt()
    cprompt = comp_prompt()
    lprompt = login_prompt(uprompt, cprompt)
    dprompt = dir_prompt(uprompt)

    config_dir = "".join(["/home/", uprompt, "/.pyhoc/"])
    config_folder(config_dir)

    udir = "".join([config_dir, ".u"])
    cdir = "".join([config_dir, ".c"])
    ldir = "".join([config_dir, ".l"])
    ddir = "".join([config_dir, ".d"])

    subs = []

    subs.append(["%u", udir, uprompt, "".join([uprompt, " "])])
    subs.append(["%U", udir, uprompt, uprompt])
    subs.append(["%bu", udir, uprompt, "".join(["[", uprompt, "] "])])
    subs.append(["%bU", udir, uprompt, "".join(["[", uprompt, "]"])])

    subs.append(["%c", cdir, cprompt, "".join([cprompt, " "])])
    subs.append(["%C", cdir, cprompt, cprompt])
    subs.append(["%bc", cdir, cprompt, "".join(["[", cprompt, "] "])])
    subs.append(["%bC", cdir, cprompt, "".join(["[", cprompt, "]"])])
    
    subs.append(["%l", ldir, lprompt, "".join([lprompt, " "])])
    subs.append(["%L", ldir, lprompt, lprompt])
    subs.append(["%bl", ldir, lprompt, "".join(["[", lprompt, "] "])])
    subs.append(["%bL", ldir, lprompt, "".join(["[", lprompt, "]"])])

    subs.append(["%d", ddir, dprompt, "".join([dprompt, " "])])
    subs.append(["%D", ddir, dprompt, dprompt])
    subs.append(["%bd", ddir, dprompt, "".join(["[", dprompt, "] "])])
    subs.append(["%bD", ddir, dprompt, "".join(["[", dprompt, "]"])])

    for literal in subs:
        if re.search(literal[0], out):
            new_state = check_status(literal[1], literal[2])
            if new_state:
                out = re.sub(literal[0], literal[3], out)
            else:
                out = re.sub(literal[0], "", out)

    return out

if __name__ == '__main__':
    output = main("".join(sys.argv[1:]))
    if output: sys.stdout.write(output)
    else: sys.exit(1)
